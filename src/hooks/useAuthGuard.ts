'use client'

import { useSession } from 'next-auth/react'
import { usePathname } from 'next/navigation'
import { useEffect, useRef, useState } from 'react'

/**
 * Hook para proteger p치ginas contra acesso via bfcache (bot칚o voltar) ap칩s logout
 * Verifica sess칚o quando a p치gina 칠 restaurada do cache do navegador
 * @returns {boolean} - Retorna false se a p치gina deve ser bloqueada (n칚o autenticado)
 */
export function useAuthGuard() {
  const { data: session, status } = useSession()
  const pathname = usePathname()
  const hasCheckedRef = useRef(false)
  const [isAuthorized, setIsAuthorized] = useState<boolean | null>(null)

  // Lista de rotas protegidas que requerem autentica칞칚o
  const protectedPaths = ['/dashboard', '/models', '/generate', '/billing', '/gallery', '/editor', '/profile', '/settings', '/credits', '/packages']
  
  const isProtectedPath = protectedPaths.some(path => pathname.startsWith(path))

  // Verifica칞칚o S칈NCRONA imediata para bloquear renderiza칞칚o
  useEffect(() => {
    if (!isProtectedPath) {
      setIsAuthorized(true)
      return
    }

    // Verifica칞칚o IMEDIATA sem delay - se n칚o est치 autenticado, bloquear
    if (status === 'unauthenticated') {
      console.log('游뛂 [useAuthGuard] Sess칚o n칚o autenticada - bloqueando renderiza칞칚o')
      setIsAuthorized(false)
      // Redirecionar imediatamente
      const callbackUrl = encodeURIComponent(pathname)
      window.location.replace(`/auth/signin?callbackUrl=${callbackUrl}`)
      return
    }

    // Se est치 carregando, aguardar
    if (status === 'loading') {
      setIsAuthorized(null) // null = loading
      return
    }

    // Se tem sess칚o, autorizar
    if (session) {
      setIsAuthorized(true)
    } else {
      setIsAuthorized(false)
      const callbackUrl = encodeURIComponent(pathname)
      window.location.replace(`/auth/signin?callbackUrl=${callbackUrl}`)
    }
  }, [session, status, pathname, isProtectedPath])

  // Verificar quando a p치gina 칠 restaurada do bfcache (evento pageshow)
  useEffect(() => {
    if (!isProtectedPath) {
      return
    }

    const handlePageShow = (event: PageTransitionEvent) => {
      // event.persisted = true significa que a p치gina foi restaurada do bfcache
      if (event.persisted) {
        console.log('游댃 [useAuthGuard] P치gina restaurada do bfcache - verificando autentica칞칚o...')
        hasCheckedRef.current = false
        
        // Verificar imediatamente e bloquear se n칚o autenticado
        if (status === 'unauthenticated' || !session) {
          console.log('游뛂 [useAuthGuard] N칚o autenticado ap칩s bfcache - bloqueando e redirecionando')
          setIsAuthorized(false)
          const callbackUrl = encodeURIComponent(pathname)
          window.location.replace(`/auth/signin?callbackUrl=${callbackUrl}`)
        }
      }
    }

    window.addEventListener('pageshow', handlePageShow)

    return () => {
      window.removeEventListener('pageshow', handlePageShow)
    }
  }, [session, status, pathname, isProtectedPath])

  // Retornar autoriza칞칚o para componentes usarem
  return isAuthorized !== false // true ou null (loading) permite renderiza칞칚o, false bloqueia
}

